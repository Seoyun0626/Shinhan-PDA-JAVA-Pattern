package SingletonPattern;

/**
 * <h2>Singleton 패턴이란</h2>
 * Singleton 패턴은 클래스가 한 개의 인스턴스만을 만들 수 있도록 하고, 어디서든지 그 인스턴스에 접근할 수 있도록 하기 위한 패턴입니다.
 * <br>
 * <img src="../img/singleton.png" alt="Singleton Pattern UML Diagram">
 * <br>
 * Singleton 클래스의 생성자는 private으로 되어 있어 클래스 외부에서 생성자 호출을 금지합니다.
 * Singleton 클래스의 유일한 인스턴스를 얻는 메소드로 getInstance가 제공됩니다.
 *
 * <ul>
 *    <li>Singleton: 유일한 인스턴스를 얻도록 구성된 클래스입니다.</li>
 *    <li>Main 클래스: 동작 상태를 확인하고자 인스턴스 일치 여부를 출력합니다.</li>
 *
 *<br>
 *
 * <h2>Singleton 패턴 활용 예시</h2>
 * <h2>Singleton 패턴을 사용한 코드 vs. 사용하지 않은 코드</h2>
 * <br>
 * <h2>Example.초콜릿 보일러 하나로 초콜렛 끓이기</h2>
 * <img src="../img/bad_singleton.png" alt="singleton">
 * <br>
 *
 * <b>Before: Singleton 패턴을 사용하지 않은 코드</b>
 * <p>
 *    보일러의 인스턴스를 여러 번 생성할 수 있으며, 각각의 인스턴스는 독립적으로 상태를 추적합니다.
 *    이로 인해 여러 보일러가 같은 재료를 채우거나 끓일 수 있으며, 이로 인한 데이터 불일치 및 예기치 않은 동작이 발생할 수 있습니다.
 *    Singleton 패턴을 적용하지 않은 경우 여러 보일러 인스턴스가 생성되므로 이러한 문제가 발생합니다.
 * </p>
 * <br>
 * <b>After1: Singleton 패턴을 사용한 코드</b>
 * <p>
 *    Singleton 패턴을 적용하면 "ChocolateBoiler" 클래스의 인스턴스가 오직 하나만 생성됩니다. 이로써 보일러 객체가 여러 개 생성되는 문제를 방지합니다.
 *    또한 어디서든 동일한 보일러 인스턴스에 접근할 수 있으므로, 시스템 전체에서 공유 자원으로 사용할 수 있고, 보일러 객체의 생성 및 소멸을 관리하기 쉽게 만듭니다.
 * </p>
 * <br>
 *
 * <b>After2: Singleton 패턴과 동기화(Synchronization)을 사용한 코드</b>
 * <p>
 *    동기화를 적용하면 여러 스레드가 동시에 보일러의 상태를 변경하거나 확인하는 것을 방지합니다.
 *    이로써 다중 스레드 환경에서도 안전하게 보일러를 사용할 수 있습니다.
 * </p>
 * <br>
 * <h3>Factory 패턴의 장점</h3>
 * <p>
 *    Factory 패턴을 사용한 코드에서의 장점은 다음과 같습니다:
 * </p>
 * <ul>
 *    <li>유일한 인스턴스: Singleton 패턴을 사용하면 특정 클래스의 인스턴스가 시스템 내에서 딱 하나만 생성되고, 모든 요청에 대해 동일한 인스턴스가 반환됩니다. 이로써 전역적으로 접근 가능한 공유 자원을 효과적으로 관리할 수 있습니다.</li>
 *    <li>자원 공유 및 절약: 인스턴스가 하나만 존재하기 때문에 메모리나 자원을 절약할 수 있습니다. 특히, 여러 곳에서 동일한 자원에 접근하거나 수정해야 할 때 유용합니다.</li>
 *    <li>전역 접근 포인트: Singleton 인스턴스는 어디서든 접근 가능한 전역적인 접근 포인트를 제공합니다. 이로써 어느 곳에서든 동일한 객체에 접근할 수 있어 편리합니다.</li>
 *    <li>스레드 안전성: Singleton 패턴을 올바르게 구현하면 다중 스레드 환경에서도 안전한 인스턴스 생성과 사용이 가능합니다.</li>
 *    <li>코드 일관성: Singleton 패턴은 시스템 내에서 하나의 인스턴스만 존재하므로, 상태의 일관성을 유지할 때 도움이 됩니다. 여러 곳에서 동시에 상태를 변경하려고 할 때의 복잡성을 제거합니다.</li>
 *    <li>효율적인 리소스 관리: 인스턴스가 하나뿐이므로, 해당 인스턴스와 관련된 리소스 관리가 효율적으로 이루어집니다.</li>
 *    <li>싱글톤 클래스의 역할 분명화: Singleton 패턴을 사용하면 해당 클래스가 오직 하나의 인스턴스만을 갖도록 강제함으로써 클래스의 역할이 분명하게 정의됩니다.</li>
 * </ul>
 * <p>
 *    Singleton 패턴은 많은 상황에서 객체의 유일성이 보장되어야 할 때 유용하며, 전역적으로 공유하는 객체나 자원을 효과적으로 관리할 수 있도록 돕습니다.
 * </p>
 *
 *
 */
public class SingletonPatternDocumentation{
}