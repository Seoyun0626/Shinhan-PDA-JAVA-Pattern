Bridge Pattern

1) Bridge Pattern은 추상화를 구현에서 분리하여 둘이 독립적으로 변화할 수 있도록 하는 구조적 패턴입니다.
2) Bridge Pattern은 추상 클래스와 구현 클래스 사이에 bridge 구조를 제공함으로써 구현 클래스를 분리합니다.
3) 이 Bridge는 캡슐화, 집합 및 상속을 활용하여 책임을 다양한 클래스로 분리합니다.
4) Bridge Pattern은 클래스와 클래스가 모두 다를때 유용하며, 프로그램에 대한 사전 지식이 없어도 클래스 변경이 쉬운ㄴ 경우에 사용됩니다.
5) Bridge Pattern은 클래스 자체를 추상화로, 클래스가 수행할 수 있는 작업을 구현으로, 그리고 브릿지 패턴 자체를 두 개의 추상화 레이어로 생각할 수 있습니다.
6) Bridge Pattern을 사용하면 추상화와 구현 간의 컴파일 시 발생할 수 있는 타임 바인딩을 피할 수 있습니다.
7) Bridge Pattern을 이용하면 추상화를 런타임에 구현자 객체로 구성할 수 있습니다.
8) 이 패턴은 23개의 GoF 디자인 패턴 중 하나입니다.

쇼핑몰에 상의, 하의, 아우터와 같이 다양한 유형의 의류를 판매하는 쇼핑몰이 있다고 가정하겠습니다.
새로운 의류가 추가될 수 있고 이에 따른 주문 및 결제, 배송 등의 이용할 수 있는 서비스가 모두 다르기 때문에 의류에 대한 변화가 자주 발생할 수 있습니다.


